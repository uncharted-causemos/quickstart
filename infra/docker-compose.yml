version: "3.7"

services:
  # Elastic
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - es-net
      - common-net
    ports:
      - 9200:9200

  # S3/Minio
  minio:
    image: minio/minio:RELEASE.2020-08-04T23-10-51Z
    volumes:
      - ./minio-temp:/data
    ports:
      - '9000:9000'
    environment:
      - MINIO_ACCESS_KEY=foobar
      - MINIO_SECRET_KEY=foobarbaz
    networks:
      - common-net
    command: server /data

  # DASK
  scheduler:
    image: docker.uncharted.software/worldmodeler/wm-data-pipeline:latest
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "2"
    hostname: dask-scheduler
    networks:
      - common-net
      - dask
    ports:
      - "8786:8786"
      - "8787:8787"
    command: ["dask-scheduler"]
  
  worker:
    image: docker.uncharted.software/worldmodeler/wm-data-pipeline:latest
    deploy:
      replicas: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "2"
    hostname: dask-worker
    networks:
      - common-net
      - dask
    command: ["dask-worker", "tcp://scheduler:8786"]

  # Prefect stack, see https://github.com/flavienbwk/prefect-docker-compose/blob/main/server/docker-compose.yml
  postgres:
    command:
      - postgres
      - -c
      - max_connections=150
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
        - postgres:/var/lib/postgresql/data
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 2s
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1
      timeout: 2s
    image: postgres:11
    networks:
      prefect-server: null
    
    
  hasura:
    command: graphql-engine serve
    depends_on:
      postgres:
        condition: service_started
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HASURA_GRAPHQL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_LOG_LEVEL: warn
      HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE: 100
      HASURA_GRAPHQL_SERVER_PORT: '3000'
      HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE: "true"
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: wget -O - http://hasura:$${HASURA_GRAPHQL_SERVER_PORT}/healthz &>/dev/null
        || exit 1
      timeout: 2s
    image: hasura/graphql-engine:v2.1.1
    init: true
    networks:
      prefect-server: null
    
  
  graphql:
    command: bash -c "prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py"
    depends_on:
      hasura:
        condition: service_started
    environment:
      PREFECT_CORE_VERSION: 1.2.0
      PREFECT_SERVER_DB_CMD: prefect-server database upgrade -y
      PREFECT_SERVER__DATABASE__CONNECTION_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret}
      PREFECT_SERVER__HASURA__HOST: hasura
    healthcheck:
      interval: 20s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://graphql:4201/health" &> /dev/null || exit
        1
      timeout: 2s
    image: prefecthq/server:core-1.2.0
    networks:
      prefect-server: null
  
  towel:
    command: python src/prefect_server/services/towel/__main__.py
    depends_on:
      graphql:
        condition: service_started
    environment:
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret} 
      PREFECT_SERVER__HASURA__HOST: hasura
    image: prefecthq/server:core-1.2.0
    networks:
      prefect-server: null
    
  
  apollo:
    command: bash -c "./post-start.sh && npm run serve"
    depends_on:
      graphql:
        condition: service_started
      hasura:
        condition: service_started
    environment:
      GRAPHQL_SERVICE_HOST: http://graphql
      GRAPHQL_SERVICE_PORT: 4201
      HASURA_API_URL: http://hasura:3000/v1alpha1/graphql
      PREFECT_API_HEALTH_URL: http://graphql:4201/health
      PREFECT_API_URL: http://graphql:4201/graphql/
      PREFECT_SERVER__TELEMETRY__ENABLED: "true"
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://apollo:4200/.well-known/apollo/server-health"
        &> /dev/null || exit 1
      timeout: 2s
    image: prefecthq/apollo:core-1.2.0
    networks:
      prefect-server: null
    ports:
      - 4200:4200/tcp

  ui:
    command: /intercept.sh
    depends_on:
      apollo:
        condition: service_started
    environment:
      PREFECT_SERVER__APOLLO_URL: http://apollo:4200/graphql
    healthcheck:
      interval: 30s
      retries: 3
      test: curl --fail --silent --head "http://ui:8080/" &> /dev/null || exit 1
      timeout: 5s
    image: prefecthq/ui:core-1.2.0
    networks:
      prefect-server: null
    ports:
      - 8080:8080/tcp

volumes:
  postgres:


networks:
  prefect-server:
    name: prefect-server
  common-net:
    name: common-net
    driver: bridge
  dask:
    name: dask
  es-net:
    driver: bridge
